// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: tender.proto

package tender_service

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TenderServiceClient is the client API for TenderService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TenderServiceClient interface {
	CreateTender(ctx context.Context, in *CreateTenderReq, opts ...grpc.CallOption) (*TenderResponse, error)
	GetTenders(ctx context.Context, in *GetTendersReq, opts ...grpc.CallOption) (*TendersListResponse, error)
	UpdateTenderStatus(ctx context.Context, in *UpdateTenderStatusReq, opts ...grpc.CallOption) (*TenderResponse, error)
	DeleteTender(ctx context.Context, in *DeleteTenderReq, opts ...grpc.CallOption) (*TenderResponse, error)
}

type tenderServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTenderServiceClient(cc grpc.ClientConnInterface) TenderServiceClient {
	return &tenderServiceClient{cc}
}

func (c *tenderServiceClient) CreateTender(ctx context.Context, in *CreateTenderReq, opts ...grpc.CallOption) (*TenderResponse, error) {
	out := new(TenderResponse)
	err := c.cc.Invoke(ctx, "/tender.TenderService/CreateTender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenderServiceClient) GetTenders(ctx context.Context, in *GetTendersReq, opts ...grpc.CallOption) (*TendersListResponse, error) {
	out := new(TendersListResponse)
	err := c.cc.Invoke(ctx, "/tender.TenderService/GetTenders", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenderServiceClient) UpdateTenderStatus(ctx context.Context, in *UpdateTenderStatusReq, opts ...grpc.CallOption) (*TenderResponse, error) {
	out := new(TenderResponse)
	err := c.cc.Invoke(ctx, "/tender.TenderService/UpdateTenderStatus", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tenderServiceClient) DeleteTender(ctx context.Context, in *DeleteTenderReq, opts ...grpc.CallOption) (*TenderResponse, error) {
	out := new(TenderResponse)
	err := c.cc.Invoke(ctx, "/tender.TenderService/DeleteTender", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TenderServiceServer is the server API for TenderService service.
// All implementations must embed UnimplementedTenderServiceServer
// for forward compatibility
type TenderServiceServer interface {
	CreateTender(context.Context, *CreateTenderReq) (*TenderResponse, error)
	GetTenders(context.Context, *GetTendersReq) (*TendersListResponse, error)
	UpdateTenderStatus(context.Context, *UpdateTenderStatusReq) (*TenderResponse, error)
	DeleteTender(context.Context, *DeleteTenderReq) (*TenderResponse, error)
	mustEmbedUnimplementedTenderServiceServer()
}

// UnimplementedTenderServiceServer must be embedded to have forward compatible implementations.
type UnimplementedTenderServiceServer struct {
}

func (UnimplementedTenderServiceServer) CreateTender(context.Context, *CreateTenderReq) (*TenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTender not implemented")
}
func (UnimplementedTenderServiceServer) GetTenders(context.Context, *GetTendersReq) (*TendersListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetTenders not implemented")
}
func (UnimplementedTenderServiceServer) UpdateTenderStatus(context.Context, *UpdateTenderStatusReq) (*TenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateTenderStatus not implemented")
}
func (UnimplementedTenderServiceServer) DeleteTender(context.Context, *DeleteTenderReq) (*TenderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteTender not implemented")
}
func (UnimplementedTenderServiceServer) mustEmbedUnimplementedTenderServiceServer() {}

// UnsafeTenderServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TenderServiceServer will
// result in compilation errors.
type UnsafeTenderServiceServer interface {
	mustEmbedUnimplementedTenderServiceServer()
}

func RegisterTenderServiceServer(s grpc.ServiceRegistrar, srv TenderServiceServer) {
	s.RegisterService(&TenderService_ServiceDesc, srv)
}

func _TenderService_CreateTender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTenderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenderServiceServer).CreateTender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tender.TenderService/CreateTender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenderServiceServer).CreateTender(ctx, req.(*CreateTenderReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenderService_GetTenders_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTendersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenderServiceServer).GetTenders(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tender.TenderService/GetTenders",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenderServiceServer).GetTenders(ctx, req.(*GetTendersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenderService_UpdateTenderStatus_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateTenderStatusReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenderServiceServer).UpdateTenderStatus(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tender.TenderService/UpdateTenderStatus",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenderServiceServer).UpdateTenderStatus(ctx, req.(*UpdateTenderStatusReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _TenderService_DeleteTender_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteTenderReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TenderServiceServer).DeleteTender(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tender.TenderService/DeleteTender",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TenderServiceServer).DeleteTender(ctx, req.(*DeleteTenderReq))
	}
	return interceptor(ctx, in, info, handler)
}

// TenderService_ServiceDesc is the grpc.ServiceDesc for TenderService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TenderService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tender.TenderService",
	HandlerType: (*TenderServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTender",
			Handler:    _TenderService_CreateTender_Handler,
		},
		{
			MethodName: "GetTenders",
			Handler:    _TenderService_GetTenders_Handler,
		},
		{
			MethodName: "UpdateTenderStatus",
			Handler:    _TenderService_UpdateTenderStatus_Handler,
		},
		{
			MethodName: "DeleteTender",
			Handler:    _TenderService_DeleteTender_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "tender.proto",
}
